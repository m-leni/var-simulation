{
  "description": "Expected deterministic outputs from metrics functions for testing",
  "tolerance": {
    "deterministic": 1e-10,
    "stochastic": 0.05,
    "note": "Deterministic functions should match exactly within floating point precision. Stochastic functions (e.g., with random sampling) allow 5% tolerance."
  },
  "calculate_returns": {
    "description": "Test data for calculate_returns function",
    "log_returns_sample": {
      "input": [100, 110, 105],
      "expected": [0.09531017980432486, -0.046520275352691876],
      "tolerance": 1e-10
    },
    "simple_returns_sample": {
      "input": [100, 110, 105],
      "expected": [0.10, -0.045454545454545456],
      "tolerance": 1e-10
    }
  },
  "historical_var": {
    "description": "Test data for historical VaR calculations",
    "sample_returns": [0.01, -0.02, 0.015, -0.01, 0.02, 0.0, -0.015, 0.01, 0.005, -0.01],
    "test_cases": {
      "confidence_90_investment_10000": {
        "confidence_level": 0.90,
        "investment_value": 10000,
        "expected_var": 200.0,
        "tolerance": 1e-10,
        "note": "90th percentile of sample returns"
      },
      "confidence_95_investment_10000": {
        "confidence_level": 0.95,
        "investment_value": 10000,
        "expected_var": 200.0,
        "tolerance": 1e-10,
        "note": "95th percentile of sample returns"
      },
      "confidence_99_investment_10000": {
        "confidence_level": 0.99,
        "investment_value": 10000,
        "expected_var": 200.0,
        "tolerance": 1e-10
      },
      "scaling_test": {
        "note": "VaR should scale linearly with investment value",
        "investment_10k": 200.0,
        "investment_20k": 400.0,
        "ratio": 2.0,
        "tolerance": 0.01
      }
    }
  },
  "parametric_var": {
    "description": "Test data for parametric VaR calculations (assumes normal distribution)",
    "sample_returns": [0.01, -0.02, 0.015, -0.01, 0.02, 0.0, -0.015, 0.01, 0.005, -0.01],
    "distribution_params": {
      "mean": 0.0015,
      "std_dev": 0.01265,
      "note": "Calculated from sample_returns"
    },
    "test_cases": {
      "confidence_90_investment_10000": {
        "confidence_level": 0.90,
        "investment_value": 10000,
        "expected_var_approx": 147.0,
        "tolerance": 5.0,
        "note": "Parametric VaR using normal distribution"
      },
      "confidence_95_investment_10000": {
        "confidence_level": 0.95,
        "investment_value": 10000,
        "expected_var_approx": 193.0,
        "tolerance": 5.0
      },
      "confidence_99_investment_10000": {
        "confidence_level": 0.99,
        "investment_value": 10000,
        "expected_var_approx": 278.0,
        "tolerance": 5.0
      },
      "scaling_test": {
        "note": "VaR should scale linearly with investment value",
        "ratio": 2.0,
        "tolerance": 0.01
      }
    }
  },
  "portfolio_var": {
    "description": "Test data for portfolio VaR calculations",
    "test_portfolio": {
      "tickers": ["GOOGL", "META", "MSFT"],
      "weights": [0.33, 0.33, 0.34],
      "investment_value": 10000,
      "note": "Uses real data from tests/data/portfolio_sample.json"
    },
    "test_cases": {
      "historical_method_95": {
        "method": "historical",
        "confidence_level": 0.95,
        "investment_value": 10000,
        "tolerance": 0.1,
        "note": "Tolerance is relative (10%) due to portfolio complexity"
      },
      "parametric_method_95": {
        "method": "parametric",
        "confidence_level": 0.95,
        "investment_value": 10000,
        "tolerance": 0.1
      },
      "confidence_ordering": {
        "note": "VaR should increase with confidence level",
        "confidence_90": "< confidence_95 < confidence_99",
        "tolerance": "monotonic ordering"
      }
    }
  },
  "weighted_moving_average": {
    "description": "Test data for weighted moving average",
    "test_prices": [246.50, 247.80, 248.90, 249.95, 250.80],
    "test_cases": {
      "window_3_uniform": {
        "window": 3,
        "weights": null,
        "note": "Uniform weights when not specified",
        "tolerance": 1e-10
      },
      "window_3_linear": {
        "window": 3,
        "weights": [1, 2, 3],
        "note": "Linear weights giving more weight to recent values",
        "tolerance": 1e-10
      }
    }
  },
  "exponential_weighted_moving_average": {
    "description": "Test data for exponential weighted moving average",
    "test_prices": [246.50, 247.80, 248.90, 249.95, 250.80],
    "test_cases": {
      "window_3_default_alpha": {
        "window": 3,
        "alpha": null,
        "note": "Default alpha = 2/(window+1)",
        "tolerance": 1e-10
      },
      "window_3_alpha_0.5": {
        "window": 3,
        "alpha": 0.5,
        "note": "Custom alpha for smoother averaging",
        "tolerance": 1e-10
      }
    }
  },
  "calculate_cumulative_yield": {
    "description": "Test data for cumulative yield calculations",
    "test_prices": [246.50, 247.80, 248.90, 249.95, 250.80],
    "test_cases": {
      "simple_method": {
        "method": "simple",
        "expected_final_yield_percent": 1.74,
        "note": "(250.80 - 246.50) / 246.50 * 100",
        "tolerance": 0.01
      },
      "log_method": {
        "method": "log",
        "expected_final_yield_percent": 1.73,
        "note": "exp(sum(log_returns)) - 1) * 100",
        "tolerance": 0.01
      }
    }
  }
}
